#'OpenCV Course - Full Tutorial with Python' kaynak olarak kullanılmıştır. (Henüz bitmedi!)
#######################################################################################################
import cv2 as cv
import numpy as np
import matplotlib.pylot as plt
                                          #READING, RESIZING AND RESCALING IMAGES#
#def rescaleFrame(frame, scale=0.75):
   # width = int(frame.shape[1] * scale)         #frame.shape[1]: Orijinal görüntünün genişliği.
   # height = int(frame.shape[0] * scale)        #frame.shape[0]: Orijinal görüntünün yüksekliği.

  #  dimensions = (width,height)

 #   return cv.resize(frame, dimensions, interpolation=cv.INTER_AREA)


#img = cv.imread("photos/cat.jpg")
#resized_img = rescaleFrame(img)

#cv.imshow("cat",img)
#cv.imshow("cat_resized",resized_img)

#cv.waitKey(0)
#######################################################################################################
                                          #READING, RESIZING AND RESCALING VIDEOS#
#def changeRes(width,height):
 #   #live videos
 #   capture.set(3,width) #3 burada sabit bir koddur ve OpenCV'de genişlik parametresini temsil eder.
 #   capture.set(4,height) #4 burada sabit bir koddur ve OpenCV'de yükseklik parametresini temsil eder.


#def rescaleFrame(frame, scale=0.75):
  #  #ımages, videos and live videos
  #  width = int(frame.shape[1] * scale)
  #  height = int(frame.shape[0] * scale)

 #   dimensions = (width,height)

 #   return cv.resize(frame, dimensions, interpolation=cv.INTER_AREA)


#capture = cv.VideoCapture("videos/cat_video.mp4")

#while True:
  #  isTrue, frame = capture.read()

  #  frame_resized = rescaleFrame(frame)

  #  cv.imshow("video",frame)
  #  cv.imshow("video_resized",frame_resized)

 #   if cv.waitKey(20) & 0xFF == ord("d"):
 #       break

#capture.release()
#cv.destroyAllWindows()
#######################################################################################################
                                          #DRAWING SHAPES AND PUTTING TEXT#
#blank = np.zeros((500,500,3), dtype = 'uint8')   #uint8 veri türü, piksel değerlerinin 0 ile 255 arasında olmasını sağlar.
#cv.imshow("black", blank)

#1. paint the image a certian color

#blank[:] = 0,255,0 # ':' tüm satır ve sütunları alır.
#cv.imshow("green", blank)

#blank[200:300, 300:400] = 0,0,255 #200 ile 300 satırları arasını alır. 300 ile 400 sütunları arasını alır.
#cv.imshow("red_rectangle", blank)

#2. draw a rectangle

#cv.rectangle(blank, (0,0), (250,250), (0,255,0), thickness=1)
#cv.imshow("black", blank)

#cv.rectangle(blank, (0,0), (250,500), (0,255,0), thickness=cv.FILLED)
#cv.imshow("black", blank)

#cv.rectangle(blank, (0,0), (250,500), (0,255,0), thickness=-1)
#cv.imshow("black", blank)

#cv.rectangle(blank, (0,0), (blank.shape[0]//2,blank.shape[1]//2), (0,255,0), thickness=-1)
#cv.imshow("black", blank)

#3. draw a circle

#cv.circle(blank, (blank.shape[0]//2, blank.shape[1]//2), 40, (0,255,0), thickness=cv.FILLED)
#cv.imshow("circle", blank)

#4. draw a line

#cv.line(blank, (0,0), (blank.shape[0]//2, blank.shape[1]//2), (255,255,255), thickness=3)
#cv.imshow("line", blank)

#cv.putText(blank, 'Hello my name is Yasar.', (0,250), cv.FONT_HERSHEY_PLAIN, 1.0, (255,255,255), 1)
#cv.imshow("text", blank)

#cv.waitKey(0)
#######################################################################################################
                                          #5 ESSENTIAL FUNCTIONS IN OPENCV#
#img = cv.imread("photos/cat.jpg")
#cv.imshow("cat",img)

# 1 Converting to grayScale

#gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
#cv.imshow("converted2gray",gray)

# 2 Blur

#blur = cv.GaussianBlur(img, (13,13), cv.BORDER_DEFAULT)
#cv.imshow("blur",blur)

# 3 Edge Cascade

#canny = cv.Canny(img,125, 175)
#cv.imshow("canny",canny)
#canny = cv.Canny(blur,125, 175)
#cv.imshow("canny",canny)

# 4 Dilating the image

#dilated = cv.dilate(canny,(7,7), iterations=3)
#cv.imshow("dilated", dilated)

# 5 Eroding the image

#eroded = cv.erode(dilated, (7,7), iterations=3)
#cv.imshow("eroded",eroded)

# 6 Resize

#resized = cv.resize(img, (500,500), interpolation=cv.INTER_AREA)
#cv.imshow("eroded",resized)

# 7 Cropping

#cropped = img[100:200, 300:400]
#cv.imshow("cropped", cropped)

#cv.waitKey(0)
#######################################################################################################
                                          #IMAGE TRANSFORMATIONS#
# Translation
#def translate(img, x, y):
   # transMat = np.float32([[1, 0, x], [0, 1, y]])
   # dimensions = (img.shape[1], img.shape[0])
   # return cv.warpAffine(img, transMat, dimensions)


# Rotation
#def rotate(img, angle, rotPoint=None):
    #(height, width) = img.shape[:2]
   # if rotPoint is None:
   #     rotPoint = (width//2, height//2)

 #   rotMat = cv.getRotationMatrix2D(rotPoint,angle,1.0)
 #   dimensions = (width, height)

 #   return cv.warpAffine(img, rotMat, dimensions)


#img = cv.imread("photos/cat.jpg")
#cv.imshow("cat", img)

#-x = left
#-y = up
#x = right
#y = down

#translated = translate(img, 100, 100)
#cv.imshow("translated", translated)

#rotated = rotate(img, -45)
#cv.imshow("Rotated", rotated)

#rotated_rotated = rotate(rotated,-45)
#cv.imshow("Rotated_rotated",rotated_rotated)

#rotated = rotate(img, -90)
#cv.imshow("Rotated2", rotated)

# Resizing
#resized = cv.resize(img, (500,500), interpolation=cv.INTER_CUBIC)
#cv.imshow("resized", resized)

# Flipping
#flipped = cv.flip(img,1)
#cv.imshow("flipped",flipped)

# Cropped
#cropped = img[200:300, 300:400]
#cv.imshow("cropped", cropped)

#cv.waitKey(0)
#######################################################################################################
                                          #CONTOUR DETECTION#
#img = cv.imread("photos/cat.jpg")
#cv.imshow("cat", img)

#blank = np.zeros((500, 500, 3), dtype = "uint8")
#cv.imshow("blank",blank)

#gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
#cv.imshow("gray",gray)

#blur = cv.GaussianBlur(gray, (5,5), cv.BORDER_DEFAULT)
#cv.imshow("Blur",blur)

#canny = cv.Canny(blur,125,175)   #blur = 123 contour(s)#   #img= 2415 contour(s)#
#cv.imshow("canny",canny)

#ret, thresh = cv.threshold(gray, 125, 255, cv.THRESH_BINARY)
#cv.imshow("thresh",thresh)

#contours, hierarchies = cv.findContours(canny, cv.RETR_LIST, cv.CHAIN_APPROX_SIMPLE)   #canny = 2415# #thresh = 2915#
#print(f"{len(contours)} contour(s) found!")

#cv.drawContours(blank, contours, -1, (0,0,255), 2)
#cv.imshow("contours drawn", blank)

#cv.waitKey(0)
#######################################################################################################
                                          #COLOR SPACES#
#img = cv.imread("photos/cat.jpg")
#cv.imshow("cat", img)

#rgb = cv.cvtColor(img, cv.COLOR_BGR2RGB)
#cv.imshow("rgb",rgb)

#plt.imshow(rgb)
#plt.show()

#plt.imshow(img)
#plt.show()

#gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
#cv.imshow("gray", gray)

#hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)
#cv.imshow("hsv",hsv)

#lab = cv.cvtColor(img, cv.COLOR_BGR2LAB)
#cv.imshow("lab", lab)

#hsv_bgr = cv.cvtColor(hsv, cv.COLOR_HSV2BGR)
#cv.imshow("hsv--->bgr", hsv_bgr)

#lab_bgr = cv.cvtColor(lab, cv.COLOR_LAB2BGR)
#cv.imshow("lab--->bgr", lab_bgr)

#cv.waitKey(0)
#######################################################################################################
                                          #COLOR CHANNELS#
#img = cv.imread("photos/cat.jpg")
#cv.imshow("cat", img)

#blank = np.zeros(img.shape[:2], dtype = "uint8")

#b,g,r = cv.split(img)

#blue = cv.merge([b,blank,blank])
#green = cv.merge([blank,g,blank])
#red = cv.merge([blank,blank,r])

#cv.imshow("blue", blue)
#cv.imshow("green", green)
#cv.imshow("red", red)

#print(img.shape)
#print(b.shape)
#print(g.shape)
#print(r.shape)

#merged = cv.merge([b,g,r])
#cv.imshow("merged",merged)

#cv.waitKey(0)
#######################################################################################################
                                          #BLURRING#
#img = cv.imread("photos/cat.jpg")
#cv.imshow("cat", img)

# Average method

#average = cv.blur(img, (17,17))
#cv.imshow("average", average)

# Gaussian method

#gaussian = cv.GaussianBlur(img, (17,17), cv.BORDER_DEFAULT)
#cv.imshow("gaussian", gaussian)

# Median method

#median = cv.medianBlur(img, 17)
#cv.imshow("median", median)

# Bilateral

#bilateral = cv.bilateralFilter(img, 10, 35, 25)
#cv.imshow("bilateral", bilateral)

#cv.waitKey(0)
#######################################################################################################
                                          #BITWISE OPERATIONS#
#blank = np.zeros((500,500,3), dtype = "uint8")

#rectangle = cv.rectangle(blank.copy(), (50,50), (450,450), (255,255,255), -1)
#circle = cv.circle(blank.copy(), (250,250), 250, (255,255,255), -1)
#cv.imshow("rectangle", rectangle)
#cv.imshow("circle", circle)

# Bitwise AND
#bitwise_and = cv.bitwise_and(rectangle, circle)
#cv.imshow("bitwise_and", bitwise_and)

# Bitwise OR

#bitwise_or = cv.bitwise_or(rectangle, circle)
#cv.imshow("bitwise_or", bitwise_or)

# Bitwise XOR
#bitwise_xor = cv.bitwise_xor(rectangle, circle)
#cv.imshow("bitwise_xor", bitwise_xor)

# Bitwise NOT

#bitwise_not = cv.bitwise_not(rectangle)
#cv.imshow("bitwise_not", bitwise_not)

#cv.waitKey(0)
#######################################################################################################
